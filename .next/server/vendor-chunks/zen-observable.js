/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/zen-observable";
exports.ids = ["vendor-chunks/zen-observable"];
exports.modules = {

/***/ "(ssr)/./node_modules/zen-observable/index.js":
/*!**********************************************!*\
  !*** ./node_modules/zen-observable/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./zen-observable.js */ \"(ssr)/./node_modules/zen-observable/zen-observable.js\").Observable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvemVuLW9ic2VydmFibGUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsbUlBQTBEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3plbi1vYnNlcnZhYmxlL2luZGV4LmpzPzJiOTkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi96ZW4tb2JzZXJ2YWJsZS5qc1wiKS5PYnNlcnZhYmxlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zen-observable/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/zen-observable/zen-observable.js":
/*!*******************************************************!*\
  !*** ./node_modules/zen-observable/zen-observable.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n (function(fn, name) { if (true) { fn(exports, module); } else { var e; } })(function(exports, module) { // === Symbol Support ===\n\nfunction hasSymbol(name) {\n  return typeof Symbol === \"function\" && Boolean(Symbol[name]);\n}\n\nfunction getSymbol(name) {\n  return hasSymbol(name) ? Symbol[name] : \"@@\" + name;\n}\n\n// Ponyfill Symbol.observable for interoperability with other libraries\nif (typeof Symbol === \"function\" && !Symbol.observable) {\n  Symbol.observable = Symbol(\"observable\");\n}\n\n// === Abstract Operations ===\n\nfunction hostReportError(e) {\n  setTimeout(function() { throw e });\n}\n\nfunction getMethod(obj, key) {\n  var value = obj[key];\n\n  if (value == null)\n    return undefined;\n\n  if (typeof value !== \"function\")\n    throw new TypeError(value + \" is not a function\");\n\n  return value;\n}\n\nfunction getSpecies(obj) {\n  var ctor = obj.constructor;\n  if (ctor !== undefined) {\n    ctor = ctor[getSymbol(\"species\")];\n    if (ctor === null) {\n      ctor = undefined;\n    }\n  }\n  return ctor !== undefined ? ctor : Observable;\n}\n\nfunction addMethods(target, methods) {\n  Object.keys(methods).forEach(function(k) {\n    var desc = Object.getOwnPropertyDescriptor(methods, k);\n    desc.enumerable = false;\n    Object.defineProperty(target, k, desc);\n  });\n}\n\nfunction cleanupSubscription(subscription) {\n  // Assert:  observer._observer is undefined\n\n  var cleanup = subscription._cleanup;\n\n  if (!cleanup)\n    return;\n\n  // Drop the reference to the cleanup function so that we won't call it\n  // more than once\n  subscription._cleanup = undefined;\n\n  // Call the cleanup function\n  try { cleanup() }\n  catch (e) { hostReportError(e) }\n}\n\nfunction subscriptionClosed(subscription) {\n  return subscription._observer === undefined;\n}\n\nfunction closeSubscription(subscription) {\n  if (subscriptionClosed(subscription))\n    return;\n\n  subscription._observer = undefined;\n  cleanupSubscription(subscription);\n}\n\nfunction cleanupFromSubscription(subscription) {\n  return function() { subscription.unsubscribe() };\n}\n\nfunction Subscription(observer, subscriber) {\n  // Assert: subscriber is callable\n\n  // The observer must be an object\n  if (Object(observer) !== observer)\n    throw new TypeError(\"Observer must be an object\");\n\n  this._cleanup = undefined;\n  this._observer = observer;\n\n  try {\n    var start$0 = getMethod(observer, \"start\");\n    if (start$0) start$0.call(observer, this);\n  } catch (e) {\n    hostReportError(e);\n  }\n\n  if (subscriptionClosed(this))\n    return;\n\n  observer = new SubscriptionObserver(this);\n\n  try {\n    // Call the subscriber function\n    var cleanup$0 = subscriber.call(undefined, observer);\n\n    // The return value must be undefined, null, a subscription object, or a function\n    if (cleanup$0 != null) {\n      if (typeof cleanup$0.unsubscribe === \"function\")\n        cleanup$0 = cleanupFromSubscription(cleanup$0);\n      else if (typeof cleanup$0 !== \"function\")\n        throw new TypeError(cleanup$0 + \" is not a function\");\n\n      this._cleanup = cleanup$0;\n    }\n  } catch (e) {\n    // If an error occurs during startup, then attempt to send the error\n    // to the observer\n    observer.error(e);\n    return;\n  }\n\n  // If the stream is already finished, then perform cleanup\n  if (subscriptionClosed(this))\n    cleanupSubscription(this);\n}\n\naddMethods(Subscription.prototype = {}, {\n  get closed() { return subscriptionClosed(this) },\n  unsubscribe: function() { closeSubscription(this) },\n});\n\nfunction SubscriptionObserver(subscription) {\n  this._subscription = subscription;\n}\n\naddMethods(SubscriptionObserver.prototype = {}, {\n\n  get closed() { return subscriptionClosed(this._subscription) },\n\n  next: function(value) {\n    var subscription = this._subscription;\n\n    // If the stream is closed, then return undefined\n    if (subscriptionClosed(subscription))\n      return;\n\n    var observer = subscription._observer;\n\n    try {\n      // If the observer has a \"next\" method, send the next value\n      var m$0 = getMethod(observer, \"next\");\n      if (m$0) m$0.call(observer, value);\n    } catch (e) {\n      hostReportError(e);\n    }\n  },\n\n  error: function(value) {\n    var subscription = this._subscription;\n\n    // If the stream is closed, throw the error to the caller\n    if (subscriptionClosed(subscription)) {\n      hostReportError(value);\n      return;\n    }\n\n    var observer = subscription._observer;\n    subscription._observer = undefined;\n\n    try {\n      var m$1 = getMethod(observer, \"error\");\n      if (m$1) m$1.call(observer, value);\n      else throw value;\n    } catch (e) {\n      hostReportError(e);\n    }\n\n    cleanupSubscription(subscription);\n  },\n\n  complete: function() {\n    var subscription = this._subscription;\n\n    if (subscriptionClosed(subscription))\n      return;\n\n    var observer = subscription._observer;\n    subscription._observer = undefined;\n\n    try {\n      var m$2 = getMethod(observer, \"complete\");\n      if (m$2) m$2.call(observer);\n    } catch (e) {\n      hostReportError(e);\n    }\n\n    cleanupSubscription(subscription);\n  },\n\n});\n\nfunction Observable(subscriber) {\n  // Constructor cannot be called as a function\n  if (!(this instanceof Observable))\n    throw new TypeError(\"Observable cannot be called as a function\");\n\n  // The stream subscriber must be a function\n  if (typeof subscriber !== \"function\")\n    throw new TypeError(\"Observable initializer must be a function\");\n\n  this._subscriber = subscriber;\n}\n\naddMethods(Observable.prototype, {\n\n  subscribe: function(observer) { for (var args = [], __$0 = 1; __$0 < arguments.length; ++__$0) args.push(arguments[__$0]); \n    if (typeof observer === 'function') {\n      observer = {\n        next: observer,\n        error: args[0],\n        complete: args[1],\n      };\n    } else if (typeof observer !== 'object' || observer === null) {\n      observer = {};\n    }\n\n    return new Subscription(observer, this._subscriber);\n  },\n\n  forEach: function(fn) { var __this = this; \n    return new Promise(function(resolve, reject) {\n      if (typeof fn !== \"function\")\n        return Promise.reject(new TypeError(fn + \" is not a function\"));\n\n      __this.subscribe({\n        _subscription: null,\n\n        start: function(subscription) {\n          if (Object(subscription) !== subscription)\n            throw new TypeError(subscription + \" is not an object\");\n\n          this._subscription = subscription;\n        },\n\n        next: function(value) {\n          var subscription = this._subscription;\n\n          if (subscription.closed)\n            return;\n\n          try {\n            fn(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        },\n\n        error: reject,\n        complete: resolve,\n      });\n    });\n  },\n\n  map: function(fn) { var __this = this; \n    if (typeof fn !== \"function\")\n      throw new TypeError(fn + \" is not a function\");\n\n    var C = getSpecies(this);\n\n    return new C(function(observer) { return __this.subscribe({\n      next: function(value) {\n        if (observer.closed)\n          return;\n\n        try { value = fn(value) }\n        catch (e) { return observer.error(e) }\n\n        observer.next(value);\n      },\n\n      error: function(e) { observer.error(e) },\n      complete: function() { observer.complete() },\n    }); });\n  },\n\n  filter: function(fn) { var __this = this; \n    if (typeof fn !== \"function\")\n      throw new TypeError(fn + \" is not a function\");\n\n    var C = getSpecies(this);\n\n    return new C(function(observer) { return __this.subscribe({\n      next: function(value) {\n        if (observer.closed)\n          return;\n\n        try { if (!fn(value)) return }\n        catch (e) { return observer.error(e) }\n\n        observer.next(value);\n      },\n\n      error: function(e) { observer.error(e) },\n      complete: function() { observer.complete() },\n    }); });\n  },\n\n  reduce: function(fn) { var __this = this; \n    if (typeof fn !== \"function\")\n      throw new TypeError(fn + \" is not a function\");\n\n    var C = getSpecies(this);\n    var hasSeed = arguments.length > 1;\n    var hasValue = false;\n    var seed = arguments[1];\n    var acc = seed;\n\n    return new C(function(observer) { return __this.subscribe({\n\n      next: function(value) {\n        if (observer.closed)\n          return;\n\n        var first = !hasValue;\n        hasValue = true;\n\n        if (!first || hasSeed) {\n          try { acc = fn(acc, value) }\n          catch (e) { return observer.error(e) }\n        } else {\n          acc = value;\n        }\n      },\n\n      error: function(e) { observer.error(e) },\n\n      complete: function() {\n        if (!hasValue && !hasSeed) {\n          return observer.error(new TypeError(\"Cannot reduce an empty sequence\"));\n        }\n\n        observer.next(acc);\n        observer.complete();\n      },\n\n    }); });\n  },\n\n});\n\nObject.defineProperty(Observable.prototype, getSymbol(\"observable\"), {\n  value: function() { return this },\n  writable: true,\n  configurable: true,\n});\n\naddMethods(Observable, {\n\n  from: function(x) {\n    var C = typeof this === \"function\" ? this : Observable;\n\n    if (x == null)\n      throw new TypeError(x + \" is not an object\");\n\n    var method = getMethod(x, getSymbol(\"observable\"));\n\n    if (method) {\n      var observable$0 = method.call(x);\n\n      if (Object(observable$0) !== observable$0)\n        throw new TypeError(observable$0 + \" is not an object\");\n\n      if (observable$0.constructor === C)\n        return observable$0;\n\n      return new C(function(observer) { return observable$0.subscribe(observer); });\n    }\n\n    if (hasSymbol(\"iterator\") && (method = getMethod(x, getSymbol(\"iterator\")))) {\n      return new C(function(observer) {\n        for (var __$0 = (method.call(x))[Symbol.iterator](), __$1; __$1 = __$0.next(), !__$1.done;) { var item$0 = __$1.value; \n          observer.next(item$0);\n          if (observer.closed)\n            return;\n        }\n\n        observer.complete();\n      });\n    }\n\n    if (Array.isArray(x)) {\n      return new C(function(observer) {\n        for (var i$0 = 0; i$0 < x.length; ++i$0) {\n          observer.next(x[i$0]);\n          if (observer.closed)\n            return;\n        }\n\n        observer.complete();\n      });\n    }\n\n    throw new TypeError(x + \" is not observable\");\n  },\n\n  of: function() { for (var items = [], __$0 = 0; __$0 < arguments.length; ++__$0) items.push(arguments[__$0]); \n    var C = typeof this === \"function\" ? this : Observable;\n\n    return new C(function(observer) {\n      for (var i$1 = 0; i$1 < items.length; ++i$1) {\n        observer.next(items[i$1]);\n        if (observer.closed)\n          return;\n      }\n\n      observer.complete();\n    });\n  },\n\n});\n\nObject.defineProperty(Observable, getSymbol(\"species\"), {\n  get: function() { return this },\n  configurable: true,\n});\n\nObject.defineProperty(Observable, \"extensions\", {\n  value: {\n    observableSymbol: getSymbol(\"observable\"),\n    setHostReportError: function(fn) { hostReportError = fn },\n  },\n});\n\nexports.Observable = Observable;\n\n\n}, \"*\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvemVuLW9ic2VydmFibGUvemVuLW9ic2VydmFibGUuanMiLCJtYXBwaW5ncyI6IjtBQUFhLENBQUMsc0JBQXNCLElBQUksSUFBOEIsSUFBSSx1QkFBdUIsS0FBSyxVQUF3SCxFQUFFLDhCQUE4Qjs7QUFFOVA7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLDBCQUEwQixTQUFTO0FBQ25DOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUTtBQUNSLGNBQWM7QUFDZDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQjtBQUN0Qjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0NBQXNDO0FBQ3RDLGlCQUFpQixpQ0FBaUM7QUFDbEQsNEJBQTRCLHlCQUF5QjtBQUNyRCxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQSw4Q0FBOEM7O0FBRTlDLGlCQUFpQiwrQ0FBK0M7O0FBRWhFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBLGtDQUFrQyw4QkFBOEIseUJBQXlCO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSCwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7O0FBRUgsc0JBQXNCO0FBQ3RCO0FBQ0E7O0FBRUE7O0FBRUEsc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTs7QUFFQSxjQUFjO0FBQ2Qsb0JBQW9COztBQUVwQjtBQUNBLE9BQU87O0FBRVAsMkJBQTJCLG1CQUFtQjtBQUM5Qyw2QkFBNkIscUJBQXFCO0FBQ2xELEtBQUssSUFBSTtBQUNULEdBQUc7O0FBRUgseUJBQXlCO0FBQ3pCO0FBQ0E7O0FBRUE7O0FBRUEsc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTs7QUFFQSxjQUFjO0FBQ2Qsb0JBQW9COztBQUVwQjtBQUNBLE9BQU87O0FBRVAsMkJBQTJCLG1CQUFtQjtBQUM5Qyw2QkFBNkIscUJBQXFCO0FBQ2xELEtBQUssSUFBSTtBQUNULEdBQUc7O0FBRUgseUJBQXlCO0FBQ3pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0M7O0FBRXRDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCO0FBQ2hCLHNCQUFzQjtBQUN0QixVQUFVO0FBQ1Y7QUFDQTtBQUNBLE9BQU87O0FBRVAsMkJBQTJCLG1CQUFtQjs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87O0FBRVAsS0FBSyxJQUFJO0FBQ1QsR0FBRzs7QUFFSCxDQUFDOztBQUVEO0FBQ0Esc0JBQXNCLGFBQWE7QUFDbkM7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHdDQUF3QywwQ0FBMEM7QUFDbEY7O0FBRUE7QUFDQTtBQUNBLG1FQUFtRSwrQkFBK0IsSUFBSTtBQUN0RztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0EsMEJBQTBCLGdCQUFnQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBLEdBQUc7O0FBRUgsbUJBQW1CLCtCQUErQix5QkFBeUI7QUFDM0U7O0FBRUE7QUFDQSx3QkFBd0Isb0JBQW9CO0FBQzVDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUgsQ0FBQzs7QUFFRDtBQUNBLG9CQUFvQixhQUFhO0FBQ2pDO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsc0JBQXNCO0FBQzdELEdBQUc7QUFDSCxDQUFDOztBQUVEOzs7QUFHQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3plbi1vYnNlcnZhYmxlL3plbi1vYnNlcnZhYmxlLmpzP2I4ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnOyAoZnVuY3Rpb24oZm4sIG5hbWUpIHsgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7IGZuKGV4cG9ydHMsIG1vZHVsZSk7IH0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIpIHsgdmFyIGUgPSBuYW1lID09PSBcIipcIiA/IHNlbGYgOiAobmFtZSA/IHNlbGZbbmFtZV0gPSB7fSA6IHt9KTsgZm4oZSwgeyBleHBvcnRzOiBlIH0pOyB9IH0pKGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSkgeyAvLyA9PT0gU3ltYm9sIFN1cHBvcnQgPT09XG5cbmZ1bmN0aW9uIGhhc1N5bWJvbChuYW1lKSB7XG4gIHJldHVybiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgQm9vbGVhbihTeW1ib2xbbmFtZV0pO1xufVxuXG5mdW5jdGlvbiBnZXRTeW1ib2wobmFtZSkge1xuICByZXR1cm4gaGFzU3ltYm9sKG5hbWUpID8gU3ltYm9sW25hbWVdIDogXCJAQFwiICsgbmFtZTtcbn1cblxuLy8gUG9ueWZpbGwgU3ltYm9sLm9ic2VydmFibGUgZm9yIGludGVyb3BlcmFiaWxpdHkgd2l0aCBvdGhlciBsaWJyYXJpZXNcbmlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgIVN5bWJvbC5vYnNlcnZhYmxlKSB7XG4gIFN5bWJvbC5vYnNlcnZhYmxlID0gU3ltYm9sKFwib2JzZXJ2YWJsZVwiKTtcbn1cblxuLy8gPT09IEFic3RyYWN0IE9wZXJhdGlvbnMgPT09XG5cbmZ1bmN0aW9uIGhvc3RSZXBvcnRFcnJvcihlKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRocm93IGUgfSk7XG59XG5cbmZ1bmN0aW9uIGdldE1ldGhvZChvYmosIGtleSkge1xuICB2YXIgdmFsdWUgPSBvYmpba2V5XTtcblxuICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIilcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHZhbHVlICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBnZXRTcGVjaWVzKG9iaikge1xuICB2YXIgY3RvciA9IG9iai5jb25zdHJ1Y3RvcjtcbiAgaWYgKGN0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgIGN0b3IgPSBjdG9yW2dldFN5bWJvbChcInNwZWNpZXNcIildO1xuICAgIGlmIChjdG9yID09PSBudWxsKSB7XG4gICAgICBjdG9yID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY3RvciAhPT0gdW5kZWZpbmVkID8gY3RvciA6IE9ic2VydmFibGU7XG59XG5cbmZ1bmN0aW9uIGFkZE1ldGhvZHModGFyZ2V0LCBtZXRob2RzKSB7XG4gIE9iamVjdC5rZXlzKG1ldGhvZHMpLmZvckVhY2goZnVuY3Rpb24oaykge1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtZXRob2RzLCBrKTtcbiAgICBkZXNjLmVudW1lcmFibGUgPSBmYWxzZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrLCBkZXNjKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKSB7XG4gIC8vIEFzc2VydDogIG9ic2VydmVyLl9vYnNlcnZlciBpcyB1bmRlZmluZWRcblxuICB2YXIgY2xlYW51cCA9IHN1YnNjcmlwdGlvbi5fY2xlYW51cDtcblxuICBpZiAoIWNsZWFudXApXG4gICAgcmV0dXJuO1xuXG4gIC8vIERyb3AgdGhlIHJlZmVyZW5jZSB0byB0aGUgY2xlYW51cCBmdW5jdGlvbiBzbyB0aGF0IHdlIHdvbid0IGNhbGwgaXRcbiAgLy8gbW9yZSB0aGFuIG9uY2VcbiAgc3Vic2NyaXB0aW9uLl9jbGVhbnVwID0gdW5kZWZpbmVkO1xuXG4gIC8vIENhbGwgdGhlIGNsZWFudXAgZnVuY3Rpb25cbiAgdHJ5IHsgY2xlYW51cCgpIH1cbiAgY2F0Y2ggKGUpIHsgaG9zdFJlcG9ydEVycm9yKGUpIH1cbn1cblxuZnVuY3Rpb24gc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikge1xuICByZXR1cm4gc3Vic2NyaXB0aW9uLl9vYnNlcnZlciA9PT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBjbG9zZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pIHtcbiAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKVxuICAgIHJldHVybjtcblxuICBzdWJzY3JpcHRpb24uX29ic2VydmVyID0gdW5kZWZpbmVkO1xuICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG59XG5cbmZ1bmN0aW9uIGNsZWFudXBGcm9tU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpIH07XG59XG5cbmZ1bmN0aW9uIFN1YnNjcmlwdGlvbihvYnNlcnZlciwgc3Vic2NyaWJlcikge1xuICAvLyBBc3NlcnQ6IHN1YnNjcmliZXIgaXMgY2FsbGFibGVcblxuICAvLyBUaGUgb2JzZXJ2ZXIgbXVzdCBiZSBhbiBvYmplY3RcbiAgaWYgKE9iamVjdChvYnNlcnZlcikgIT09IG9ic2VydmVyKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYnNlcnZlciBtdXN0IGJlIGFuIG9iamVjdFwiKTtcblxuICB0aGlzLl9jbGVhbnVwID0gdW5kZWZpbmVkO1xuICB0aGlzLl9vYnNlcnZlciA9IG9ic2VydmVyO1xuXG4gIHRyeSB7XG4gICAgdmFyIHN0YXJ0JDAgPSBnZXRNZXRob2Qob2JzZXJ2ZXIsIFwic3RhcnRcIik7XG4gICAgaWYgKHN0YXJ0JDApIHN0YXJ0JDAuY2FsbChvYnNlcnZlciwgdGhpcyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBob3N0UmVwb3J0RXJyb3IoZSk7XG4gIH1cblxuICBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKVxuICAgIHJldHVybjtcblxuICBvYnNlcnZlciA9IG5ldyBTdWJzY3JpcHRpb25PYnNlcnZlcih0aGlzKTtcblxuICB0cnkge1xuICAgIC8vIENhbGwgdGhlIHN1YnNjcmliZXIgZnVuY3Rpb25cbiAgICB2YXIgY2xlYW51cCQwID0gc3Vic2NyaWJlci5jYWxsKHVuZGVmaW5lZCwgb2JzZXJ2ZXIpO1xuXG4gICAgLy8gVGhlIHJldHVybiB2YWx1ZSBtdXN0IGJlIHVuZGVmaW5lZCwgbnVsbCwgYSBzdWJzY3JpcHRpb24gb2JqZWN0LCBvciBhIGZ1bmN0aW9uXG4gICAgaWYgKGNsZWFudXAkMCAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNsZWFudXAkMC51bnN1YnNjcmliZSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBjbGVhbnVwJDAgPSBjbGVhbnVwRnJvbVN1YnNjcmlwdGlvbihjbGVhbnVwJDApO1xuICAgICAgZWxzZSBpZiAodHlwZW9mIGNsZWFudXAkMCAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGNsZWFudXAkMCArIFwiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuXG4gICAgICB0aGlzLl9jbGVhbnVwID0gY2xlYW51cCQwO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElmIGFuIGVycm9yIG9jY3VycyBkdXJpbmcgc3RhcnR1cCwgdGhlbiBhdHRlbXB0IHRvIHNlbmQgdGhlIGVycm9yXG4gICAgLy8gdG8gdGhlIG9ic2VydmVyXG4gICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWYgdGhlIHN0cmVhbSBpcyBhbHJlYWR5IGZpbmlzaGVkLCB0aGVuIHBlcmZvcm0gY2xlYW51cFxuICBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKVxuICAgIGNsZWFudXBTdWJzY3JpcHRpb24odGhpcyk7XG59XG5cbmFkZE1ldGhvZHMoU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IHt9LCB7XG4gIGdldCBjbG9zZWQoKSB7IHJldHVybiBzdWJzY3JpcHRpb25DbG9zZWQodGhpcykgfSxcbiAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uKCkgeyBjbG9zZVN1YnNjcmlwdGlvbih0aGlzKSB9LFxufSk7XG5cbmZ1bmN0aW9uIFN1YnNjcmlwdGlvbk9ic2VydmVyKHN1YnNjcmlwdGlvbikge1xuICB0aGlzLl9zdWJzY3JpcHRpb24gPSBzdWJzY3JpcHRpb247XG59XG5cbmFkZE1ldGhvZHMoU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0ge30sIHtcblxuICBnZXQgY2xvc2VkKCkgeyByZXR1cm4gc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMuX3N1YnNjcmlwdGlvbikgfSxcblxuICBuZXh0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zdWJzY3JpcHRpb247XG5cbiAgICAvLyBJZiB0aGUgc3RyZWFtIGlzIGNsb3NlZCwgdGhlbiByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKVxuICAgICAgcmV0dXJuO1xuXG4gICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vYnNlcnZlcjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBJZiB0aGUgb2JzZXJ2ZXIgaGFzIGEgXCJuZXh0XCIgbWV0aG9kLCBzZW5kIHRoZSBuZXh0IHZhbHVlXG4gICAgICB2YXIgbSQwID0gZ2V0TWV0aG9kKG9ic2VydmVyLCBcIm5leHRcIik7XG4gICAgICBpZiAobSQwKSBtJDAuY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhvc3RSZXBvcnRFcnJvcihlKTtcbiAgICB9XG4gIH0sXG5cbiAgZXJyb3I6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3N1YnNjcmlwdGlvbjtcblxuICAgIC8vIElmIHRoZSBzdHJlYW0gaXMgY2xvc2VkLCB0aHJvdyB0aGUgZXJyb3IgdG8gdGhlIGNhbGxlclxuICAgIGlmIChzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgaG9zdFJlcG9ydEVycm9yKHZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX29ic2VydmVyO1xuICAgIHN1YnNjcmlwdGlvbi5fb2JzZXJ2ZXIgPSB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgdmFyIG0kMSA9IGdldE1ldGhvZChvYnNlcnZlciwgXCJlcnJvclwiKTtcbiAgICAgIGlmIChtJDEpIG0kMS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICBlbHNlIHRocm93IHZhbHVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhvc3RSZXBvcnRFcnJvcihlKTtcbiAgICB9XG5cbiAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gIH0sXG5cbiAgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zdWJzY3JpcHRpb247XG5cbiAgICBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpXG4gICAgICByZXR1cm47XG5cbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX29ic2VydmVyO1xuICAgIHN1YnNjcmlwdGlvbi5fb2JzZXJ2ZXIgPSB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgdmFyIG0kMiA9IGdldE1ldGhvZChvYnNlcnZlciwgXCJjb21wbGV0ZVwiKTtcbiAgICAgIGlmIChtJDIpIG0kMi5jYWxsKG9ic2VydmVyKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBob3N0UmVwb3J0RXJyb3IoZSk7XG4gICAgfVxuXG4gICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICB9LFxuXG59KTtcblxuZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKSB7XG4gIC8vIENvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgT2JzZXJ2YWJsZSkpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9ic2VydmFibGUgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uXCIpO1xuXG4gIC8vIFRoZSBzdHJlYW0gc3Vic2NyaWJlciBtdXN0IGJlIGEgZnVuY3Rpb25cbiAgaWYgKHR5cGVvZiBzdWJzY3JpYmVyICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9ic2VydmFibGUgaW5pdGlhbGl6ZXIgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuXG4gIHRoaXMuX3N1YnNjcmliZXIgPSBzdWJzY3JpYmVyO1xufVxuXG5hZGRNZXRob2RzKE9ic2VydmFibGUucHJvdG90eXBlLCB7XG5cbiAgc3Vic2NyaWJlOiBmdW5jdGlvbihvYnNlcnZlcikgeyBmb3IgKHZhciBhcmdzID0gW10sIF9fJDAgPSAxOyBfXyQwIDwgYXJndW1lbnRzLmxlbmd0aDsgKytfXyQwKSBhcmdzLnB1c2goYXJndW1lbnRzW19fJDBdKTsgXG4gICAgaWYgKHR5cGVvZiBvYnNlcnZlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb2JzZXJ2ZXIgPSB7XG4gICAgICAgIG5leHQ6IG9ic2VydmVyLFxuICAgICAgICBlcnJvcjogYXJnc1swXSxcbiAgICAgICAgY29tcGxldGU6IGFyZ3NbMV0sXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgb2JzZXJ2ZXIgPSB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fc3Vic2NyaWJlcik7XG4gIH0sXG5cbiAgZm9yRWFjaDogZnVuY3Rpb24oZm4pIHsgdmFyIF9fdGhpcyA9IHRoaXM7IFxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoZm4gKyBcIiBpcyBub3QgYSBmdW5jdGlvblwiKSk7XG5cbiAgICAgIF9fdGhpcy5zdWJzY3JpYmUoe1xuICAgICAgICBfc3Vic2NyaXB0aW9uOiBudWxsLFxuXG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbihzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICBpZiAoT2JqZWN0KHN1YnNjcmlwdGlvbikgIT09IHN1YnNjcmlwdGlvbilcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Ioc3Vic2NyaXB0aW9uICsgXCIgaXMgbm90IGFuIG9iamVjdFwiKTtcblxuICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbiA9IHN1YnNjcmlwdGlvbjtcbiAgICAgICAgfSxcblxuICAgICAgICBuZXh0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zdWJzY3JpcHRpb247XG5cbiAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLmNsb3NlZClcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmbih2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuXG4gIG1hcDogZnVuY3Rpb24oZm4pIHsgdmFyIF9fdGhpcyA9IHRoaXM7IFxuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIilcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoZm4gKyBcIiBpcyBub3QgYSBmdW5jdGlvblwiKTtcblxuICAgIHZhciBDID0gZ2V0U3BlY2llcyh0aGlzKTtcblxuICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbihvYnNlcnZlcikgeyByZXR1cm4gX190aGlzLnN1YnNjcmliZSh7XG4gICAgICBuZXh0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAob2JzZXJ2ZXIuY2xvc2VkKVxuICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB0cnkgeyB2YWx1ZSA9IGZuKHZhbHVlKSB9XG4gICAgICAgIGNhdGNoIChlKSB7IHJldHVybiBvYnNlcnZlci5lcnJvcihlKSB9XG5cbiAgICAgICAgb2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICB9LFxuXG4gICAgICBlcnJvcjogZnVuY3Rpb24oZSkgeyBvYnNlcnZlci5lcnJvcihlKSB9LFxuICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCkgeyBvYnNlcnZlci5jb21wbGV0ZSgpIH0sXG4gICAgfSk7IH0pO1xuICB9LFxuXG4gIGZpbHRlcjogZnVuY3Rpb24oZm4pIHsgdmFyIF9fdGhpcyA9IHRoaXM7IFxuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIilcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoZm4gKyBcIiBpcyBub3QgYSBmdW5jdGlvblwiKTtcblxuICAgIHZhciBDID0gZ2V0U3BlY2llcyh0aGlzKTtcblxuICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbihvYnNlcnZlcikgeyByZXR1cm4gX190aGlzLnN1YnNjcmliZSh7XG4gICAgICBuZXh0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAob2JzZXJ2ZXIuY2xvc2VkKVxuICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB0cnkgeyBpZiAoIWZuKHZhbHVlKSkgcmV0dXJuIH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgcmV0dXJuIG9ic2VydmVyLmVycm9yKGUpIH1cblxuICAgICAgICBvYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgIH0sXG5cbiAgICAgIGVycm9yOiBmdW5jdGlvbihlKSB7IG9ic2VydmVyLmVycm9yKGUpIH0sXG4gICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7IG9ic2VydmVyLmNvbXBsZXRlKCkgfSxcbiAgICB9KTsgfSk7XG4gIH0sXG5cbiAgcmVkdWNlOiBmdW5jdGlvbihmbikgeyB2YXIgX190aGlzID0gdGhpczsgXG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihmbiArIFwiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuXG4gICAgdmFyIEMgPSBnZXRTcGVjaWVzKHRoaXMpO1xuICAgIHZhciBoYXNTZWVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDE7XG4gICAgdmFyIGhhc1ZhbHVlID0gZmFsc2U7XG4gICAgdmFyIHNlZWQgPSBhcmd1bWVudHNbMV07XG4gICAgdmFyIGFjYyA9IHNlZWQ7XG5cbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24ob2JzZXJ2ZXIpIHsgcmV0dXJuIF9fdGhpcy5zdWJzY3JpYmUoe1xuXG4gICAgICBuZXh0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAob2JzZXJ2ZXIuY2xvc2VkKVxuICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB2YXIgZmlyc3QgPSAhaGFzVmFsdWU7XG4gICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcblxuICAgICAgICBpZiAoIWZpcnN0IHx8IGhhc1NlZWQpIHtcbiAgICAgICAgICB0cnkgeyBhY2MgPSBmbihhY2MsIHZhbHVlKSB9XG4gICAgICAgICAgY2F0Y2ggKGUpIHsgcmV0dXJuIG9ic2VydmVyLmVycm9yKGUpIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhY2MgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKGUpIHsgb2JzZXJ2ZXIuZXJyb3IoZSkgfSxcblxuICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIWhhc1ZhbHVlICYmICFoYXNTZWVkKSB7XG4gICAgICAgICAgcmV0dXJuIG9ic2VydmVyLmVycm9yKG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVkdWNlIGFuIGVtcHR5IHNlcXVlbmNlXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVyLm5leHQoYWNjKTtcbiAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgIH0sXG5cbiAgICB9KTsgfSk7XG4gIH0sXG5cbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoT2JzZXJ2YWJsZS5wcm90b3R5cGUsIGdldFN5bWJvbChcIm9ic2VydmFibGVcIiksIHtcbiAgdmFsdWU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcyB9LFxuICB3cml0YWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxufSk7XG5cbmFkZE1ldGhvZHMoT2JzZXJ2YWJsZSwge1xuXG4gIGZyb206IGZ1bmN0aW9uKHgpIHtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSBcImZ1bmN0aW9uXCIgPyB0aGlzIDogT2JzZXJ2YWJsZTtcblxuICAgIGlmICh4ID09IG51bGwpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHggKyBcIiBpcyBub3QgYW4gb2JqZWN0XCIpO1xuXG4gICAgdmFyIG1ldGhvZCA9IGdldE1ldGhvZCh4LCBnZXRTeW1ib2woXCJvYnNlcnZhYmxlXCIpKTtcblxuICAgIGlmIChtZXRob2QpIHtcbiAgICAgIHZhciBvYnNlcnZhYmxlJDAgPSBtZXRob2QuY2FsbCh4KTtcblxuICAgICAgaWYgKE9iamVjdChvYnNlcnZhYmxlJDApICE9PSBvYnNlcnZhYmxlJDApXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Iob2JzZXJ2YWJsZSQwICsgXCIgaXMgbm90IGFuIG9iamVjdFwiKTtcblxuICAgICAgaWYgKG9ic2VydmFibGUkMC5jb25zdHJ1Y3RvciA9PT0gQylcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUkMDtcblxuICAgICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uKG9ic2VydmVyKSB7IHJldHVybiBvYnNlcnZhYmxlJDAuc3Vic2NyaWJlKG9ic2VydmVyKTsgfSk7XG4gICAgfVxuXG4gICAgaWYgKGhhc1N5bWJvbChcIml0ZXJhdG9yXCIpICYmIChtZXRob2QgPSBnZXRNZXRob2QoeCwgZ2V0U3ltYm9sKFwiaXRlcmF0b3JcIikpKSkge1xuICAgICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uKG9ic2VydmVyKSB7XG4gICAgICAgIGZvciAodmFyIF9fJDAgPSAobWV0aG9kLmNhbGwoeCkpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX18kMTsgX18kMSA9IF9fJDAubmV4dCgpLCAhX18kMS5kb25lOykgeyB2YXIgaXRlbSQwID0gX18kMS52YWx1ZTsgXG4gICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtJDApO1xuICAgICAgICAgIGlmIChvYnNlcnZlci5jbG9zZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcbiAgICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbihvYnNlcnZlcikge1xuICAgICAgICBmb3IgKHZhciBpJDAgPSAwOyBpJDAgPCB4Lmxlbmd0aDsgKytpJDApIHtcbiAgICAgICAgICBvYnNlcnZlci5uZXh0KHhbaSQwXSk7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLmNsb3NlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHggKyBcIiBpcyBub3Qgb2JzZXJ2YWJsZVwiKTtcbiAgfSxcblxuICBvZjogZnVuY3Rpb24oKSB7IGZvciAodmFyIGl0ZW1zID0gW10sIF9fJDAgPSAwOyBfXyQwIDwgYXJndW1lbnRzLmxlbmd0aDsgKytfXyQwKSBpdGVtcy5wdXNoKGFyZ3VtZW50c1tfXyQwXSk7IFxuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09IFwiZnVuY3Rpb25cIiA/IHRoaXMgOiBPYnNlcnZhYmxlO1xuXG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uKG9ic2VydmVyKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBpdGVtcy5sZW5ndGg7ICsraSQxKSB7XG4gICAgICAgIG9ic2VydmVyLm5leHQoaXRlbXNbaSQxXSk7XG4gICAgICAgIGlmIChvYnNlcnZlci5jbG9zZWQpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgIH0pO1xuICB9LFxuXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KE9ic2VydmFibGUsIGdldFN5bWJvbChcInNwZWNpZXNcIiksIHtcbiAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMgfSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYnNlcnZhYmxlLCBcImV4dGVuc2lvbnNcIiwge1xuICB2YWx1ZToge1xuICAgIG9ic2VydmFibGVTeW1ib2w6IGdldFN5bWJvbChcIm9ic2VydmFibGVcIiksXG4gICAgc2V0SG9zdFJlcG9ydEVycm9yOiBmdW5jdGlvbihmbikgeyBob3N0UmVwb3J0RXJyb3IgPSBmbiB9LFxuICB9LFxufSk7XG5cbmV4cG9ydHMuT2JzZXJ2YWJsZSA9IE9ic2VydmFibGU7XG5cblxufSwgXCIqXCIpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zen-observable/zen-observable.js\n");

/***/ })

};
;